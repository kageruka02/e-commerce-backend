openapi: 3.0.0
info:
  title: "e-commerce"
  description: "Everything you need to know about E-commerce"
  version: 1.0.5

servers:
  - url: "http://localhost:5000/"
    description: "This is my local server"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Blog:
      type: object
      required:
        - title
        - description
        - category
      properties:
        title:
          type: string
          example: "Understanding JavaScript Closures"
        description:
          type: string
          example: "This blog explains how closures work in JavaScript."
        category:
          type: string
          example: "Programming"
        numViews:
          type: integer
          default: 0
        numLiked:
          type: integer
          default: 0
        numDislikes:
          type: integer
          default: 0
        image:
          type: string
          default: "https://www.dreamstime.com/blogging-blog-concepts-ideas-worktable-blogging-blog-concepts-ideas-white-worktable-image110423482"
      example:
        title: "Understanding JavaScript Closures"
        description: "This blog explains how closures work in JavaScript."
        category: "Programming"
        numViews: 0
        numLiked: 0
        numDislikes: 0
        image: "https://www.dreamstime.com/blogging-blog-concepts-ideas-worktable-blogging-blog-concepts-ideas-white-worktable-image110423482"
        author: "John Doe"



#user section
paths:
  /api/user/register:
    post:
      summary: Sign up
      description: Register as a user
      tags: [User]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                  description: Must be unique
                mobile:
                  type: string
                  description: Must be unique
                password:
                  type: string
                role:
                  type: string
                  default: "user"
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  firstName:
                    type: string
                  lastName:
                    type: string
                  email:
                    type: string
                  mobile:
                    type: number
        "409":
          description: User already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User already exists"
        "400":
          description: Missing required fields
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "An unexpected error occurred"
  
  /api/user/login:
    post:
      summary: Login a user
      description: Only signed-up users are allowed
      tags: [User]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                    description: User's unique ID
                    example: "605c72ef153207c74b8f5b97"
                  firstName:
                    type: string
                    example: "Leon"
                  lastName:
                    type: string
                    example: "Noel"
                  email:
                    type: string
                    example: "user@example.com"
                  mobile:
                    type: string
                    example: "0787885494"
                  token:
                    type: string
                    description: Authentication token
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        "400":
          description: Invalid credentials provided
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid Credentials"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "An error occurred while processing the login request."

  /api/user/forgot-password-token:
    post:
      summary: Generate reset-password link
      tags: [User]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "user@example.com"
      responses:
        "200":
          description: Password reset token successfully generated and email sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: Password reset token
                    example: "abc123xyz"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User not found"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "An error occurred while processing the password reset request."

  /api/user/reset-password/{token}:
    put:
      summary: Reset password
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  example: '123567newSecurePassword123!'
      parameters:
        - in: path
          name: token
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Password reset successfully
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Password reset successful"
        '401':
          description: Invalid or expired token
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Token expired, please try again later"
        '500':
          description: Internal server error
          schema:
            type: object
            properties:
              message:
                type: string
                example: "An error occurred while resetting the password."
  /api/user/admin-login:
    post:
      summary: Login an admin
      tags:
        - User
      description: Only signed-up users allowed
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: 'user@example.com'
                password:
                  type: string
                  example: 'SecurePassword123!'
      responses:
        '200':
          description: Successful login admin
          schema:
            type: object
            properties:
              _id:
                type: string
                description: User's unique ID
                example: "605c72ef153207c74b8f5b97"
              firstName:
                type: string
                description: User's first name
                example: "Leon"
              lastName:
                type: string
                description: User's last name
                example: "Noel"
              email:
                type: string
                description: User's email
                example: "user@example.com"
              mobile:
                type: string
                description: User's mobile number
                example: "0787885494"
              token:
                type: string
                description: Authentication token for the user
                example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '401':
          description: Invalid credentials provided
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Invalid Credentials"
        '500':
          description: Internal server error
          schema:
            type: object
            properties:
              message:
                type: string
                example: "An error occurred while processing the login request."
      
  /api/user/cart:
    post:
      summary: Add or update user cart
      tags:
        - Cart
      description: Adds products to a user's cart or updates existing ones
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                cart:
                  type: array
                  items:
                    type: object
                    properties:
                      productId:
                        type: string
                      color:
                        type: string
                      count:
                        type: integer
              required:
                - cart 
      responses:
        "200":
          description: Cart updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Cart successfully updated"
        "401":
          description: Unauthorized
        "500":
          description: Internal server error
        "409":
          description: quantity is missing
    get:
      summary: get user cart
      tags: [Cart]
      security:
        - bearerAuth: []
      responses:
        200:
          description: get user cart
        500:
          description: internal server error
        401:
          description: unauthorized
  
  /api/user/cart/applyCoupon:
    post:
      summary: Apply a coupon to the user's cart
      description: Apply a discount coupon to the user's cart and update the total price after the discount.
      tags: [Cart]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                coupon:
                  type: string
                  example: "DISCOUNT10"
      responses:
        "200":
          description: Coupon applied successfully
        "404":
          description: Coupon not found
  /api/user/cart/cash-order:
    post:
      summary: Create the order
      description: This is only cash on delivery
      tags: [Order]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                COD:
                  type: boolean
                  example: true
                  required: true
      responses:
        "200":
          description: Order placed successfully
        "409":
          description: Quantity is not available
  /api/user/allUsers:
    get:
      summary: Getting all Users
      tags: [User]
      description: Admin only permission
      security:
        - bearerAuth: []    
      responses:
        200:
          description: Retrieve all users
        500:
          description: internal server error
        401:
          description: unauthorized
        
  /api/user/refresh:
    get:
      summary: generating new refresh token
      tags: [User]
      responses:
        200:
          description: Refresh token generated
        400:
          description: |
            Bad Request - Occurs when:
            1. No refresh token is found in the cookies.
            2. The refresh token is not found in the database or does not match any user.
        401:
          description: |
            Unauthorized - Occurs when:
            1. The refresh token is invalid or cannot be verified.
            2. The decoded ID from the refresh token does not match the user's ID.
  /api/user/logout:
    get:
      summary: log Out for a user
      tags: [User]
      responses:
        400:
          description: No refresh token found
        204:
          description: Logout successful
        404:
          description: No user has the refresh token
  /api/user/wishlist:
    get:
      summary: retrieve wishlist for user logged in
      tags: [User]
      security:
        - bearerAuth: []
      responses:
        200: 
          description: wishlist successful got
        500:
          description: internal server error
        401:
          description: unauthorized
  /api/user/myOrder:
    get:
      summary: get my personal orders
      tags: [Order]
      security:
        - bearerAuth: []
      responses:
        200: 
          description: orders successful 
        500:
          description: internal server error
        401:
          description: unauthorized
  /api/user/{id}:
    get:
      summary: Get user by ID
      description: Fetch a user from the database using their unique MongoDB ID.
      tags: [User]
      operationId: getUser
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The unique MongoDB ID of the user.
          schema:
            type: string
      responses:
        "200":
          description: Successful response with user details
          content:
            application/json:
              schema:
                type: object
        "401":
          description: Unauthorized – the user is not authenticated.
        "500":
          description: Internal server error – an issue occurred on the server.
        "404":
          description: User not found – no user was found with the provided ID.
    delete:
      summary: Delete a user
      tags: [User]
      description: Deletes a user from the database by ID.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the user to be deleted.
          schema:
            type: string
      responses:
        "200":
          description: User deleted successfully
        "404":
          description: User not found
        "500":
          description: Server error
        
  
  /api/user/empty-cart:
    delete:
      summary: Empty the user's cart
      tags: [Cart]
      description: Deletes the cart associated with the authenticated user.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successfully emptied the cart
          content:
            application/json:
              schema:
                type: object
        "500":
            description: Server error
        "401":
            description: unauthorized
  /api/user/edit-user:
    patch:
      summary: Update user details
      description: Updates the authenticated user's information.
      tags: [User]
      operationId: updateUser
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  example: "John"
                lastName:
                  type: string
                  example: "Doe"
                email:
                  type: string
                  format: email
                  example: "john.doe@example.com"
                mobile:
                  type: string
                  example: "+1234567890"
      responses:
        "200":
          description: User updated successfully
        "500":
          description: Failed to update
        "404":
          description: User not found
  /api/user/password:
    put:
      summary: Update user password
      description: Updates the authenticated user's password.
      tags: [User]
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  format: password
                  example: "newSecurePassword123"
      responses:
        "200":
          description: Password updated successfully
        "400":
          description: Password not changed
        "404":
          description: User not found
        "500":
          description: Failed to update password
  /api/user/address:
    put:
      summary: Update user's address
      description: Updates the address of the authenticated user.
      tags:
        - User
      security:
        - BearerAuth: []
      parameters:
      - in: body
        name: address
        schema:
              type: object
              properties:
                address:
                  type: string
                  example: "123 Main St, Springfield, USA"
      - $ref: "#/components/parameters/Authorization"
      responses:
        200:
          description: Successfully updated user address
        500:
          description: Internal server error.
        401:
          description: Not authorized
  /api/user/order/update-order/{id}:
    put:
      summary: Update order status
      description: Updates the status of an order and updates the payment intent status.
      tags:
        - Order
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Order ID (MongoDB ObjectId)
          schema:
            type: string
            example: "64b5a5f4e5a4c6a0c3a1b2d3"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum:
                    - "Not Processed"
                    - "Cash on Delivery"
                    - "Processing"
                    - "Dispatched"
                    - "Cancelled"
                    - "Delivered"
                  example: "Cancelled"
      responses:
        200:
          description: Successfully updated order status.
        401:
          description: Unauthorized - Token is missing or invalid.
        500:
          description: Internal server error.
  /api/user/block-User/{id}:
    put:
      summary: Block a user
      description: Blocks a user by setting the `isBlocked` field to `true`.
      tags:
        - User
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: User ID (MongoDB ObjectId)
          schema:
            type: string
            example: "64b5a5f4e5a4c6a0c3a1b2d3"
      responses:
        200:
          description: Successfully blocked the user.
        401:
          description: Unauthorized - Token is missing or invalid.
        500:
          description: Internal server error.
  /api/user/unblock-User/{id}:
    put:
      summary: Unblock a user
      description: Unblock a user by setting the `isBlocked` field to `false`.
      tags:
        - User
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: User ID (MongoDB ObjectId)
          schema:
            type: string
            example: "64b5a5f4e5a4c6a0c3a1b2d3"
      responses:
        200:
          description: Successfully unblocked the user.
        401:
          description: Unauthorized - Token is missing or invalid.
        500:
          description: Internal server error.

        #product section

  /api/product/:
    post:
      summary: Creating a product
      description: "Handles the creation of a new product."
      tags: 
        - Product
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                slug:
                  type: string
                  description: "Optional slug for the product"
                description:
                  type: string
                price:
                  type: number
                  format: float
                category:
                  type: string
                brand:
                  type: string
                quantity:
                  type: number
                color:
                  type: string
      responses:
        200:
          description: Product created successfully
        401:
          description: Unauthorized - Token is missing or invalid.
        500:
          description: Internal server error

    get:
      summary: get all product
      description: no need for authentication
      tags: [Product]
      responses:
        200:
          description: Products got successful
        401:
          description: Unauthorized - Token is missing or invalid.
        500:
          description: internal server Error
    
  /api/product/{id}:
    get:
      summary: Get single product
      description: Get a single product without authentication
      tags: [Product]
      parameters:
      - name: id
        in: path
        required: true
      responses:
        200:
          description: Product is retrieved successful
        401:
          description: Unauthorized - Token is missing or invalid.
        500:
          description: internal server Error
    patch:
      summary: Update a single product
      description: Update a product's details.
      tags:
        - Product
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The unique ID of the product to update
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                slug:
                  type: string
                description:
                  type: string
                price:
                  type: number
                category:
                  type: string
                brand:
                  type: string
                quantity:
                  type: number
                color:
                  type: string
      responses:
        200:
          description: Product updated successfully
        401:
          description: Unauthorized - Token is missing or invalid
        500:
          description: Internal server error
    delete:
      summary: delete product
      description: Delete product from the list of products
      tags: [Product]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The unique ID of the product to delete
          schema:
            type: string
      responses:
        204:
          description: product deleted
        401:
          description: Unauthorized - Token is missing or invalid
        500:
          description: Internal server Error
      
            
  /api/product/addToWishlist:
    put:
      summary: Add or remove a product from the wishlist
      description: Add a product to the wishlist or remove it if already present.
      tags:
        - Product
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productId:
                  type: string
                  description: ID of the product to add/remove from the wishlist
                  required: true
      responses:
        200:
          description: Wishlist updated successfully
        401:
          description: Unauthorized - Token is missing or invalid
        500:
          description: Internal server error

  /api/product/rating:
   put:
      summary: Add or update a product rating
      description: Allows a user to add or update a rating for a product.
      tags:
        - Product
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productId:
                  type: string
                  description: ID of the product to rate
                  required: true
                star:
                  type: integer
                  description: Star rating (1-5)
                  minimum: 1
                  maximum: 5
                  required: true
                comment:
                  type: string
                  description: User comment on the product
      responses:
        200:
          description: Product rating updated successfully
        400:
          description: Invalid product ID or rating
        401:
          description: Unauthorized - Token is missing or invalid
        500:
          description: Internal server error
  /api/product/upload/{id}:
    put:
        summary: Upload and log images for a product
        tags: [Product]
        description: Uploads images to Cloudinary, hashes the files, and stores image URLs in the product document.
        security:
          - bearerAuth: []
        parameters:
          - name: id
            in: path
            required: true
            description: The ID of the product
            schema:
              type: string
        requestBody:
          required: true 
          content:
            multipart/form-data:
              schema:
                type: object
                properties:
                  images:
                    type: array
                    items:
                      type: string
                      format: binary   
                    description: The images to be uploaded
        responses:
          "200":
            description: Successfully updated product with uploaded images
          401:
            description: Unauthorized - Token is missing or invalid.
          500:
            description: internal server Error

#Blog section


  /api/blog/:
    post:
      summary: Create blog about Products
      description: Endpoint to create a new blog post
      tags: [Blog]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Blog'
      responses:
        '201':
          description: Blog post created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blog'
        '400':
          description: Bad request, invalid input data
        '500':
          description: Internal server error
    
    get:
      summary: Get all blogs
      description: no need for authentication
      tags: [Blog]
      responses:
        200:
          description: Got all posts
        '500':
          description: Internal server error

  /api/blog/{id}:        
    put:
      summary: Update Blog products
      description: Endpoint to edit blog Products
      tags: [Blog]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Blog'
      responses:
        '400':
          description: Bad request, invalid input data
        '500':
          description: Internal server error
        '200':
          description: Blog updated
    get:
      summary: Get specific product
      description: no authentication required
      parameters:
        - in : path
          name: id
          required: true
      tags: [Blog]
      responses:
        200:
          description: Got all posts
        '500':
          description: Internal server error
    delete:
      summary: delete Blog
      description: require authentication to delete blog
      tags: [Blog]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
      responses:
        204:
          description: deleted successfully
        500:
          description: internal server Error
      
      

  /api/blog/likes:
    put:
      summary: User likes the blog
      description:  Allows an authenticated user to like a blog post. If the user previously disliked it, it will be updated to liked.
      tags: [Blog]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                blogId:
                  type: string
                  description: The ID of the blog post to like
                  example: "64c72ef153207c74b8f5b97"
      responses:
        '200':
          description: Successfully liked the blog post
        '401':
          description: Unauthorized - User is not authenticated
        '500':
          description: Internal server error
        '409':
          description: Blog already liked
  
  /api/blog/dislikes:
    put:
      summary: User dislikes the blog
      description:  Allows an authenticated user to dislike a blog post. If the user previously liked it, it will be updated to disliked.
      tags: [Blog]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                blogId:
                  type: string
                  description: The ID of the blog post to dislike
                  example: "64c72ef153207c74b8f5b97"
      responses:
        '200':
          description: Successfully disliked the blog post
        '401':
          description: Unauthorized - User is not authenticated
        '500':
          description: Internal server error
        '409':
          description: User already disliked

    #product category
  /api/Pcategory:
    post:
      summary: Create product Category
      description: api post category
      tags: [Product Category]
      security:
          - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: 
                title:
                  type: string
                  example: "Phones"
      responses:
        201:
          description: created product Category
        '401':
          description: Unauthorized - User is not authenticated
        '500':
          description: Internal server error
    
    get:
      summary: Get all products Categories
      description: no need for authentication
      tags: [Product Category]
      responses:
        200:
          description: Got all products Categories
        '500':
          description: Internal server error
    
  
      
  /api/Pcategory/{id}:
    put:
      summary: Update  products Category
      description: Endpoint to edit Product category
      tags: [Product Category]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: 
                title:
                  type: string
                  example: "Phones"
      responses:
        200:
          description: Edited successfully
        '401':
          description: Unauthorized - User is not authenticated
        '500':
          description: Internal server error

    delete:
      summary: delete Category
      description: require authentication to delete product Category
      tags: [Product Category]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
      responses:
        204:
          description: deleted successfully
        500:
          description: internal server Error

    get:
      summary: Get specific product Category
      description: no authentication required
      parameters:
        - in : path
          name: id
          required: true
      tags: [Product Category]
      responses:
        200:
          description: Got all Product Category
        '500':
          description: Internal server error


          #Blog Category

  /api/Bcategory:
    post:
      summary: Create Blog Category
      description: api Blog category
      tags: [Blog Category]
      security:
          - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: 
                title:
                  type: string
                  example: "Commercial"
      responses:
        201:
          description: created Blog Category
        '401':
          description: Unauthorized - User is not authenticated
        '500':
          description: Internal server error
    
    get:
      summary: Get all Blog Categories
      description: no need for authentication
      tags: [Blog Category]
      responses:
        200:
          description: Got all blog Categories
        '500':
          description: Internal server error
  /api/Bcategory/{id}:
    put:
      summary: Update  blog Category
      description: Endpoint to edit blog category
      tags: [Blog Category]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: 
                title:
                  type: string
                  example: "commercial"
      responses:
        200:
          description: Edited successfully
        '401':
          description: Unauthorized - User is not authenticated
        '500':
          description: Internal server error

    delete:
      summary: delete Blog Category 
      description: require authentication to delete product Category
      tags: [Blog Category]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
      responses:
        204:
          description: deleted successfully
        500:
          description: internal server Error

    get:
      summary: Get specific Blog Category
      description: no authentication required
      parameters:
        - in : path
          name: id
          required: true
      tags: [Blog Category]
      responses:
        200:
          description: Got all Blog Category
        '500':
          description: Internal server error
  
  #Brand Category
    

  
  /api/brand:
    post:
      summary: Create brand
      description: api brand
      tags: [Brand]
      security:
          - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: 
                title:
                  type: string
                  example: "Samsung"
      responses:
        201:
          description: created brand
        '401':
          description: Unauthorized - User is not authenticated
        '500':
          description: Internal server error
    
    get:
      summary: Get all brands
      description: no need for authentication
      tags: [Brand]
      responses:
        200:
          description: Got all brands
        '500':
          description: Internal server error
  /api/brand/{id}:
    put:
      summary: Update  brand Name
      description: Endpoint to edit brand name
      tags: [Brand]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: 
                title:
                  type: string
                  example: "Samsung"
      responses:
        200:
          description: Edited successfully
        '401':
          description: Unauthorized - User is not authenticated
        '500':
          description: Internal server error

    delete:
      summary: delete brand
      description: require authentication to delete brand
      tags: [Brand]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
      responses:
        204:
          description: deleted successfully
        500:
          description: internal server Error

    get:
      summary: Get specific brand
      description: no authentication required
      parameters:
        - in : path
          name: id
          required: true
      tags: [Brand]
      responses:
        200:
          description: Got all Brand
        '500':
          description: Internal server error
    
              

  


 
  
  

