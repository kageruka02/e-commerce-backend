swagger: "2.0"
info:
  title: "e-commerce"
  description: "Everything you need to know about E-commerce"
  version: 1.0.5
  servers:
    -url: `http://localhost:500/`
    description: "this is my local server"

schemes: [http, https]

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    Authorization:
      in: header
      name: Authorization
      schema:
        type: string
      required: true
      description: Bearer token for authentication



paths:
  /api/user/register:
    post:
      summary: Sign up 
      description: Register as a user
      tags: [User]
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
      - in: body
        name: user
        schema:
          type: object
          properties:
            firstName:
              type: string
              required: true
            lastName:
              type: string
            email:
              type: string
              x-unique: true
              required: true
            mobile:
              type: string
              x-unique: true
            password:
              type: string
              required: true
            role:
              type: string
              default: "user"
      responses:
        201:
          description: user created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  firstName:
                    type: string
                  lastName:
                    type: string
                  email:
                    type: string
                  mobile:
                    type: number
        409:
          description: user already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User already exists
        400:
          description: Missing required fields
          content:
            application/json:
              schema:
                type: object
                properties:
                message:
                  type: string
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "An unexpected error occurred"
  /api/user/login:
    post:
      summary: login a user
      description: only signed up users allowed
      tags: [User]
      consumes:
        - application/json
      parameters:
      - in: body
        name: login
        schema:
          type: object
          properties:
            email:
              type: string
            password:
              type: string
      responses:
        '200':
          description: Successful login
          schema:
            type: object
            properties:
              _id:
                type: string
                description: User's unique ID
                example: "605c72ef153207c74b8f5b97"
              firstName:
                type: string
                description: User's first name
                example: "Leon"
              lastName:
                type: string
                description: User's last name
                example: "Noel"
              email:
                type: string
                description: User's email
                example: "user@example.com"
              mobile:
                type: string
                description: User's mobile number
                example: "0787885494"
              token:
                type: string
                description: Authentication token for the user
                example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '400':
          description: Invalid credentials provided
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Invalid Credentials"
        '500':
          description: Internal server error
          schema:
            type: object
            properties:
              message:
                type: string
                example: "An error occurred while processing the login request."

  /api/user/forgort-password-token:
    post:
      summary: generate reset-password link
      tags: [User]
      consumes: 
       - application/json
      parameters:
      - in: body
        name: passwordReset
        schema:
          type: object
          properties:
            email:
              type: string
              required: true
              example: "user@example.com"
      responses:
          '200':
            description: Password reset token successfully generated and email sent
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: Password reset token
                  example: "abc123xyz"
          '404':
            description: User not found
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "User not found"
          '500':
            description: Internal server error
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "An error occurred while processing the password reset request."

  /api/user/reset-password/{token}:
    put:
      summary: reset password
      tags: [User]
      consumes:
        - application/json
      parameters:
        - in: path
          name: token
          type: string
          required: true
        - in: body
          name: password
          schema:
            type: object
            properties:
              password:
                type: string
                example: '123567newSecurePassword123!'
      responses:
        '200':
          description: Password reset successfully
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Password reset successful"
        '401':
          description: Invalid or expired token
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Token expired, please try again later"
        '500':
          description: Internal server error
          schema:
            type: object
            properties:
              message:
                type: string
                example: "An error occurred while resetting the password."
  /api/user/admin-login:
    post:
      summary: login an admin
      tags: [User]
      description: only signed up users allowed
      consumes:
        - application/json
      parameters:
      - in: body
        name: login
        schema:
          type: object
          properties:
            email:
              type: string
            password:
              type: string
      responses:
        '200':
          description: Successful login admin
          schema:
            type: object
            properties:
              _id:
                type: string
                description: User's unique ID
                example: "605c72ef153207c74b8f5b97"
              firstName:
                type: string
                description: User's first name
                example: "Leon"
              lastName:
                type: string
                description: User's last name
                example: "Noel"
              email:
                type: string
                description: User's email
                example: "user@example.com"
              mobile:
                type: string
                description: User's mobile number
                example: "0787885494"
              token:
                type: string
                description: Authentication token for the user
                example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '401':
          description: Invalid credentials provided
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Invalid Credentials"
        '500':
          description: Internal server error
          schema:
            type: object
            properties:
              message:
                type: string
                example: "An error occurred while processing the login request."
      
  /api/user/cart:
    post:
      summary: Add or update user cart
      tags: [Cart]
      description: Adds products to a user's cart or updates existing ones
      security:
        - BearerAuth: []
      consumes:
        - application/json
      parameters:
      - in: body
        name: cart
        schema:
              type: object
              properties:
                cart:
                  type: array
                  items:
                    type: object
                    properties:
                      productId:
                        type: string
                      color:
                        type: string
                      count:
                        type: integer
      - in: header
        name: Authorization
        schema:
          type: string
          required: true
          description: Bearer token for authentication
      responses:
        "200":
          description: Cart updated successfully
          content:
            application/json:
              schema:
                type: object
          description: Invalid request
        "401":
          description: Unauthorized
        "500":
          description: Internal server error
        "409":
          description: quantity is missing
    get:
      summary: get user cart
      tags: [Cart]
      security:
        - bearerAuth: []
      parameters:
      - $ref: "#/components/parameters/Authorization"
      responses:
        200:
          description: get user cart
        500:
          description: internal server error
        401:
          description: unauthorized
  
  /api/user/cart/applyCoupon:
    post:
      summary: Apply a coupon to the user's cart
      description: Apply a discount coupon to the user's cart and update the total price after the discount.
      tags: [Cart]
      security:
        - bearerAuth: []
      consumes:
        - application/json
      parameters:
      - in: body
        name: coupon
        schema:
              type: object
              properties:
                coupon:
                  type: string
                  example: "DISCOUNT10"  
      - $ref: "#/components/parameters/Authorization"
      responses:
        "200":
          description: Coupon applied successfully
        "404":
          description: Coupon not found
  /api/user/cart/cash-order:
    post:
      summary: Create the order
      description: This is only cash on delivery
      tags: [Cart]
      security:
        - bearerAuth: []
      consumes:
        - application/json
      parameters:
      - in: body
        name: order
        schema:
          type: object
          properties:
            COD:
              type: boolean
              example: true
              required: true
      - $ref: "#/components/parameters/Authorization"
      responses:
        200:
          description: Order placed successful
        409:
          description: Quantity is not available
  /api/user/allUsers:
    get:
      summary: Getting all Users
      tags: [User]
      description: Admin only permission
      security:
        - bearerAuth: []
      parameters:
      - $ref: "#/components/parameters/Authorization"
      responses:
        200:
          description: all Users
  /api/user/refresh:
    get:
      summary: generating new refresh token
      tags: [User]
      responses:
        200:
          description: Refresh token generated
        400:
          description: |
            Bad Request - Occurs when:
            1. No refresh token is found in the cookies.
            2. The refresh token is not found in the database or does not match any user.
        401:
          description: |
            Unauthorized - Occurs when:
            1. The refresh token is invalid or cannot be verified.
            2. The decoded ID from the refresh token does not match the user's ID.
  /api/user/logout:
    get:
      summary: log Out for a user
      tags: [User]
      responses:
        400:
          description: No refresh token found
        204:
          description: Logout successful
        404:
          description: No user has the refresh token
  /api/user/wishlist:
    get:
      summary: retrieve wishlist for user logged in
      tags: [User]
      security:
        - bearerAuth: []
      parameters:
      - $ref: "#/components/parameters/Authorization"
      responses:
        200: 
          description: wishlist successful got
        500:
          description: internal server error
        401:
          description: unauthorized
  /api/user/myOrder:
    get:
      summary: get my personal orders
      tags: [Order]
      security:
        - bearer Auth: []
      parameters:
      - $ref: "#/components/parameters/Authorization"
      responses:
        200: 
          description: orders successful 
        500:
          description: internal server error
        401:
          description: unauthorized
  /api/user/{id}:
    get:
      summary: Get user by ID
      tags: [User]
      description: Fetch a user from the database using their unique MongoDB ID.
      operationId: getUser
      security:
        - bearer Auth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The unique MongoDB ID of the user
          schema:
            type: string
        - $ref: "#/components/parameters/Authorization"

      responses:
        "200":
          description: Successful response with user details
          content:
            application/json:
              schema:
                type: object
        "401":
          description: unauthorized
        "500":
          description: internal server error
        "404":
          description: User not found
    delete:
      summary: Delete a user
      tags: [User]
      description: Deletes a user from the database by ID.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the user to be deleted.
          schema:
            type: string
        - $ref: "#/components/parameters/Authorization"
      responses:
        "200":
          description: User deleted successfully
        "404":
          description: User not found
        "500":
          description: Server error
        
  
  /api/user/empty-cart:
    delete:
      summary: Empty the user's cart
      tags: [Cart]
      description: Deletes the cart associated with the authenticated user.
      security:
        - bearerAuth: []
      parameters:
      - $ref: "#/components/parameters/Authorization"
      responses:
        "200":
          description: Successfully emptied the cart
          content:
            application/json:
              schema:
                type: object
        "500":
            description: Server error
        "401":
            description: unauthorized
  /api/user/edit-user:
      patch:
        summary: Update user details
        tags: [User]
        description: Updates the authenticated user's information.
        security:
          - bearerAuth: []
        parameters:
        - in: body
          name: user
          schema:
            type: object
            properties:
              firstName:
                type: string
                example: "John"
              lastName:
                type: string
                example: "Doe"
              email:
                type: string
                format: email
                example: "john.doe@example.com"
              mobile:
                type: string
                example: "+1234567890"
        - $ref: "#/components/parameters/Authorization"
        responses:
          "200":
            description: User updated successfully
          "500":
            description: Failed to update
          "404":
            description: User not found
  /api/user/password:
    put:
      summary: Update user password
      description: Updates the authenticated user's password.
      tags: [User]
      security:
        - bearerAuth: []
      parameters:
        - in: body
          name: password
          schema:
              type: object
              properties:
                password:
                  type: string
                  format: password
                  example: "newSecurePassword123"

        - $ref: "#/components/parameters/Authorization"
      responses:
        200:
          description: Password updated successfully
        "400":
          description: Password not changed
        "404":
          description: User not found
        "500":
          description: Failed to update password
  /api/user/address:
    put:
      summary: Update user's address
      description: Updates the address of the authenticated user.
      tags:
        - User
      security:
        - BearerAuth: []
      parameters:
      - in: body
        name: address
        schema:
              type: object
              properties:
                address:
                  type: string
                  example: "123 Main St, Springfield, USA"
      - $ref: "#/components/parameters/Authorization"
      responses:
        200:
          description: Successfully updated user address
        500:
          description: Internal server error.
        401:
          description: Not authorized
  /api/user/order/update-order/{id}:
    put:
      summary: Update order status
      description: Updates the status of an order and updates the payment intent status.
      tags:
        - Order
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Order ID (MongoDB ObjectId)
          schema:
            type: string
            example: "64b5a5f4e5a4c6a0c3a1b2d3"
        - $ref: "#/components/parameters/Authorization"
        - in: body
          name: orderStatus
          schema:
            type: object
            properties:
                status:
                  type: string
                  enum:
                    - "Not Processed"
                    - "Cash on Delivery"
                    - "Processing"
                    - "Dispatched"
                    - "Cancelled"
                    - "Delivered"
                  example: "Cancelled"
      responses:
        200:
          description: Successfully updated order status.
        401:
          description: Unauthorized - Token is missing or invalid.
        500:
          description: Internal server error.
  /api/user/block-User/{id}:
    put:
      summary: Block a user
      description: Blocks a user by setting the `isBlocked` field to `true`.
      tags:
        - User
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: User ID (MongoDB ObjectId)
          schema:
            type: string
            example: "64b5a5f4e5a4c6a0c3a1b2d3"
        - $ref: "#/components/parameters/Authorization"
      responses:
        200:
          description: Successfully blocked the user.
        401:
          description: Unauthorized - Token is missing or invalid.
        500:
          description: Internal server error.
  /api/user/unblock-User/{id}:
    put:
      summary: Unblock a user
      description: Unblock a user by setting the `isBlocked` field to `false`.
      tags:
        - User
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: User ID (MongoDB ObjectId)
          schema:
            type: string
            example: "64b5a5f4e5a4c6a0c3a1b2d3"
        - $ref: "#/components/parameters/Authorization"
      responses:
        200:
          description: Successfully unblocked the user.
        401:
          description: Unauthorized - Token is missing or invalid.
        500:
          description: Internal server error.
        